syntax enable " Turn on syntax highlighting
filetype on " Turn on filetype detection
filetype indent on " Load  filetype indention files from the .vim/indent directory
filetype plugin on " Load filetype plugins
set nocompatible " Disable vi compatibility
set relativenumber " Set number lines
set cursorline " highlight cursor line
set tabstop=4 " Set tab stop to 4 columns (spaces)
set expandtab " Use space characters instead of tabs
set shiftwidth=4 " Set shift width to 4
set scrolloff=15 " do not let cursor move N lines above or below without scrolling screen
set nowrap " turn off word wrap
set ignorecase " Ignore case durring search
set smartcase " Ignore ignorecase if using capital letters in search
set showcmd " Show last command
set showmode " Show mode on last line
set history=1000 " Set history limit
set wildmenu " Autocomplete commands
set wildmode=list:longest " wildmenu behaves like bash autocomplete
set wildignore=*.docx,*.jpg,*.png,*.jpeg,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.xlsx
set backspace=indent,eol,start
set splitbelow
set clipboard=unnamed
set splitright
colorscheme molokai 

" netrw settings for file tree
let g:netrw_liststyle = 3
let g:netrw_list_hide = '.*\.pyc$'
let g:netrw_banner = 0
let g:netrw_winsize = 15

" airline configs
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'badwolf'
let g:airline_powerline_fonts = 1

" rainbow bracket configs
let g:rainbow_active = 1
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'green', 'cyan']

" terminal stuff
set termwinsize = "20x0"

" zo zc open/close zR ZM open/close all

" PLUGINS ---------------------------------------------------------------- {{{
call plug#begin('~/.vim/plugged')
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'powerline/powerline-fonts'
    Plug 'vim-scripts/vim-gitgutter'
    Plug 'tpope/vim-fugitive'
    Plug 'frazrepo/vim-rainbow'
    Plug 'tpope/vim-vinegar'
    Plug 'junegunn/fzf', {'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    let g:coc_global_extensions = [
    \ 'coc-tsserver',
    \ 'coc-snippets',
    \ 'coc-python',
    \ 'coc-json',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-sql',
    \ 'coc-spell-checker',
    \ 'coc-highlight',
    \ 'coc-vimlsp',
    \ ]
    Plug 'Vimjas/vim-python-pep8-indent'
    " Javascript
    Plug 'pangloss/vim-javascript'
    Plug 'othree/javascript-libraries-syntax.vim'
    " Syntax
    Plug 'sheerun/vim-polyglot'
    Plug 'fatih/vim-hclfmt'
    Plug 'lepture/vim-jinja'
    Plug 'tpope/vim-dispatch'

call plug#end()

" }}}


" MAPPINGS --------------------------------------------------------------- {{{
let mapleader = " "

" Type jk to exit insert mode quickly.
inoremap jk <Esc>

" Insert new line and exit insert mode
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

" Map tab to forward and backwards through file
nnoremap <Tab> <c-d>
nnoremap <S-Tab> <c-u>

" Center cursor when moving to next word in search
nnoremap n nzz
nnoremap N Nzz

" Formatters
map <leader>j :%!jq . -<CR>
map <leader>x :%!xmllint --format -<CR>

" You can split the window in Vim by typing :split or :vsplit.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.
nnoremap <leader>s <c-w>j
nnoremap <leader>w <c-w>k
nnoremap <leader>a <c-w>h
nnoremap <leader>d <c-w>l

" Window resizing
nnoremap <leader>l <c-w><
nnoremap <leader>k <c-w>-
nnoremap <leader>j <c-w>+
nnoremap <leader>h <c-w>>

" FZF bindings
nnoremap <leader>p :Files<CR>

" Terminal remaps
tnoremap <Esc><Esc> <c-w>N

" tabs
nnoremap <silent> <leader><Tab> :tabn<CR>
nnoremap <silent> <leader><S-Tab> :tabp<CR>

" Coc
map <leader>A :CocAction<CR>
map <silent> <leader>b <Plug>(coc-definition)
map <silent> <leader>B :vsp<CR><Plug>(coc-definition) " Open in Vertical split
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()
inoremap <silent><expr> <F1> CocActionAsync('showSignatureHelp')
inoremap <silent><expr> <F2> coc#refresh()
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>l :CocDiagnostics<CR>
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Symbol renaming.
nmap <leader>r <Plug>(coc-rename)

" Testing
map <leader>t :Start! -wait=always pytest -svv %<CR>

nnoremap <Up>     :resize +2<Cr>
nnoremap <Down>   :resize -2<Cr>
nnoremap <Left>   :vertical resize -2<Cr>
nnoremap <Right>  :vertical resize +2<Cr>

nmap <leader>sp :call <SID>SynStack() <CR>
map <leader>f :Dispatch! yapf % -i<CR>
nnoremap <leader>R :RainbowLoad<CR>
nnoremap <silent> <leader>F :%s/false/False/g<CR> :%s/true/True/g<CR>
" }}}


" VIMSCRIPT -------------------------------------------------------------- {{{

" This will enable code folding.
" Use the marker method of folding.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker formatoptions-=cro  
augroup END

" Set file type indentions
autocmd Filetype html,sql,js,jinja setlocal tabstop=2 shiftwidth=2 expandtab noautoindent

if version >= 703
    set undodir=~/.vim/backup
    set undofile
    set undoreload=10000
endif

augroup cursor_off
    autocmd!
    autocmd WinLeave * set nocursorline 
    autocmd WinEnter * set cursorline
augroup END

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" }}}


" STATUS LINE ------------------------------------------------------------ {{{

" Clear status line when vimrc is reloaded
" set statusline=

" set statusline+=\ %F\ %M\ %Y\ %R

" set statusline +=%=
" 
" set statusline+=\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\ %p%%
" " Show the status on the second to last line
" set laststatus=2

" }}}


" ABBREVIATIONS -------------------------------------------------------- {{{

" Abbreviations go here

" }}}


" COMMANDS -------------------------------------------------------------- {{{

function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" }}}
